./raptoreum-cli help
Help and example commands for specific commands can be seen with:

./raptoreum-cli help <command>
comandos que más uso:
start -NoNewWindow raptoreumd.exe
raptoreum-cli -rpcwallet=C:/Users/56947/AppData/Roaming/RaptoreumCore/wallet3/ getnewaddress
loadwallet correct way to do it--------->raptoreum-cli loadwallet "C:/Users/56947/Desktop/raptoreum/test-wallet/"
C:/Users/56947/AppData/Roaming/RaptoreumCore/wallet-raptoreano-2

CREAR TOKEN: raptoreum-cli createasset '{"name":"MiMoneda", "updatable":true, "is_unique":false, "decimalpoint":0, "maxMintCount":100000, "type":0}'

AYUDA COMANDOS CON PROBLEMAS:
the cmd createwallet "wallet_name" auto load the newly created wallet, you only need to use loadwallet if you restart the raptoreumd.
wen you have more that 1 wallet loaded you need to specify witch wallet should run the cmd example ./raptoreum-cli -rpcwallet=testwallet getwalletinfo note the default wallet is at -rpcwallet=""
to see the loaded wallets run the cmd listwallets

Comandos que probablemente usaré:

Rawtransactions:

createrawtransaction: Crea una transacción sin firmar.
decoderawtransaction: Decodifica una transacción sin firmar.
fundrawtransaction: Agrega fondos a una transacción sin firmar.
sendrawtransaction: Envía una transacción firmada a la red.

Wallet:

sendtoaddress: Envía una cantidad específica de moneda a una dirección.
sendmany: Envía múltiples cantidades de moneda a múltiples direcciones.
getbalance: Obtiene el saldo total de la billetera.
listtransactions: Lista las transacciones realizadas en la billetera.
gettransaction: Obtiene información detallada sobre una transacción específica.

Addressindex:

getaddressbalance: Obtiene el saldo de una dirección.
getaddressdeltas: Obtiene los cambios de saldo de una dirección.
getaddressmempool: Obtiene las transacciones pendientes relacionadas con una dirección.
getaddresstxids: Obtiene los identificadores de transacción relacionados con una dirección.
getaddressutxos: Obtiene los UTXOs (unspent transaction outputs) relacionados con una dirección.
Blockchain:
6. getbestblockhash: Obtiene el hash del último bloque en la cadena.

getblockchaininfo: Proporciona información sobre el estado actual de la cadena de bloques.
getblockcount: Obtiene el número de bloques en la cadena de bloques.
getblockhash height: Obtiene el hash de un bloque en una altura específica.
getblockstats hash_or_height: Obtiene estadísticas de un bloque específico.

COMANDOS CON LOS QUE TRABAJAR PRIMERO PARA CREAR MI PROPIO SULLYNODE:
Crear una nueva billetera: Si aún no tienes una billetera, puedes utilizar el comando createwallet para crear una nueva billetera.

Obtener una dirección de recepción: Utiliza el comando getnewaddress para obtener una nueva dirección de recepción en tu billetera. Esta será la dirección a la que enviarás las monedas.

Enviar monedas: Utiliza el comando sendtoaddress para enviar una cantidad específica de monedas a la dirección de recepción que obtuviste en el paso anterior.

Verificar la transacción: Opcionalmente, puedes utilizar el comando gettransaction para obtener detalles sobre la transacción que acabas de realizar, como el estado y la confirmación.

Realizar copias de seguridad: Es una buena práctica realizar copias de seguridad de tu billetera después de realizar transacciones importantes. Puedes utilizar el comando backupwallet para realizar una copia de seguridad de tu billetera en una ubicación segura.


TODOS LOS COMANDOS:== Addressindex ==
getaddressbalance
getaddressdeltas
getaddressmempool
getaddresstxids
getaddressutxos

== Blockchain ==
getbestblockhash
getbestchainlock
getblock "blockhash" ( verbosity )
getblockchaininfo
getblockcount
getblockhash height
getblockhashes timestamp
getblockheader "hash" ( verbose )
getblockheaders "hash" ( count verbose )
getblockstats hash_or_height ( stats )
getchaintips ( count branchlen )
getchaintxstats ( nblocks blockhash )
getdifficulty
getmempoolancestors txid (verbose)
getmempooldescendants txid (verbose)
getmempoolentry txid
getmempoolinfo
getmerkleblocks "filter" "hash" ( count )
getrawmempool ( verbose )
getspecialtxes "blockhash" ( type count skip verbosity )
getspentinfo
gettxout "txid" n ( include_mempool )
gettxoutproof ["txid",...] ( blockhash )
gettxoutsetinfo
preciousblock "blockhash"
pruneblockchain
savemempool
verifychain ( checklevel nblocks )
verifytxoutproof "proof"

== Control ==
debug "category"
getmemoryinfo ("mode")
help ( "command" "subcommand" )
logging ( <include> <exclude> )
stop
uptime

== Evo ==
bls "command" ...
protx "command" ...
quorum "command" ...
verifychainlock "blockHash" "signature" ( blockHeight )
verifyislock "id" "txid" "signature" ( maxHeight )

== Generating ==
generate nblocks ( maxtries )
generatetoaddress nblocks address (maxtries)
setgenerate generate ( genproclimit )

== Mining ==
getblocktemplate ( TemplateRequest )
getmininginfo
getnetworkhashps ( nblocks height )
prioritisetransaction <txid> <fee delta>
submitblock "hexdata"  ( "dummy" )

== Network ==
addnode "node" "add|remove|onetry"
clearbanned
disconnectnode "[address]" [nodeid]
getaddednodeinfo ( "node" )
getconnectioncount
getnettotals
getnetworkinfo
getpeerinfo
listbanned
ping
setban "subnet" "add|remove" (bantime) (absolute)
setnetworkactive true|false

== Raptoreum ==
coinjoin "command"
getcoinjoininfo
getgovernanceinfo
getpoolinfo
getsuperblockbudget index
gobject "command" ...
mnsync [status|next|reset]
smartnode "command" ...
smartnodelist ( "mode" "filter" )
spork "command"
voteraw <mn-collateral-tx-hash> <mn-collateral-tx-index> <governance-hash> <vote-signal> [yes|no|abstain] <time> <vote-sig>

== Rawtransactions ==
combinerawtransaction ["hexstring",...]
createrawtransaction [{"txid":"id","vout":n},...] [{"address":amount},{"data":"hex"},...] ( locktime )
decoderawtransaction "hexstring"
decodescript "hexstring"
fundrawtransaction "hexstring" ( options )
getrawtransaction "txid" ( verbose "blockhash" )
sendrawtransaction "hexstring" ( allowhighfees instantsend bypasslimits)
signrawtransaction "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] ["privatekey1",...] sighashtype )
signrawtransactionwithkey "hexstring" ["privatekey1",...] ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] sighashtype )

== Util ==
createmultisig nrequired ["key",...]
estimatesmartfee conf_target ("estimate_mode")
signmessagewithprivkey "privkey" "message"
validateaddress "address"
verifymessage "address" "signature" "message"

== Wallet ==
abandontransaction "txid"
abortrescan
addmultisigaddress nrequired ["key",...] ( "label" )
backupwallet "destination"
createwallet "wallet_name"
dumphdinfo
dumpprivkey "address"
dumpwallet "filename"
encryptwallet "passphrase"
getaccount (Deprecated, will be removed in V0.18. To use this command, start raptoreumd with -deprecatedrpc=accounts)
getaccountaddress (Deprecated, will be removed in V0.18. To use this command, start raptoreumd with -deprecatedrpc=accounts)
getaddressbyaccount (Deprecated, will be removed in V0.18. To use this command, start raptoreumd with -deprecatedrpc=accounts)
getaddressesbylabel "label"
getaddressinfo "address"
getbalance ( "(dummy)" minconf addlocked include_watchonly )
getnewaddress ( "label" )
getrawchangeaddress
getreceivedbyaccount (Deprecated, will be removed in V0.18. To use this command, start raptoreumd with -deprecatedrpc=accounts)
getreceivedbyaddress "address" ( minconf addlocked )
gettransaction "txid" ( include_watchonly )
getunconfirmedbalance
getwalletinfo
importaddress "address" ( "label" rescan p2sh )
importelectrumwallet "filename" index
importmulti "requests" ( "options" )
importprivkey "privkey" ( "label" ) ( rescan )
importprunedfunds
importpubkey "pubkey" ( "label" rescan )
importwallet "filename"
keepass <genkey|init|setpassphrase>
keypoolrefill ( newsize )
listaccounts (Deprecated, will be removed in V0.18. To use this command, start raptoreumd with -deprecatedrpc=accounts)
listaddressbalances ( minamount )
listaddressgroupings
listlabels ( "purpose" )
listlockunspent
listreceivedbyaccount (Deprecated, will be removed in V0.18. To use this command, start raptoreumd with -deprecatedrpc=accounts)
listreceivedbyaddress ( minconf addlocked include_empty include_watchonly address_filter )
listsinceblock ( "blockhash" target_confirmations include_watchonly include_removed )
listtransactions (label count skip include_watchonly)
listunspent ( minconf maxconf  ["addresses",...] [include_unsafe] [query_options])
listwallets
loadwallet "filename"
lockunspent unlock ([{"txid":"txid","vout":n},...])
move (Deprecated, will be removed in V0.18. To use this command, start raptoreumd with -deprecatedrpc=accounts)
removeaddress "address"
removeprunedfunds "txid"
rescanblockchain ("start_height") ("stop_height")
sendfrom (Deprecated, will be removed in V0.18. To use this command, start raptoreumd with -deprecatedrpc=accounts)
sendmany "" {"address":amount,...} ( minconf addlocked "comment" ["address",...] subtractfeefrom use_is use_cj conf_target "estimate_mode")
sendtoaddress "address" amount ( "comment" "comment_to" subtractfeefromamount use_is use_cj conf_target "estimate_mode")setaccount (Deprecated, will be removed in V0.18. To use this command, start raptoreumd with -deprecatedrpc=accounts)
setcoinjoinamount amount
setcoinjoinrounds rounds
settxfee amount
signmessage "address" "message"
signrawtransactionwithwallet "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] sighashtype )
unloadwallet ( "wallet_name" )
upgradetohd ( "mnemonic" "mnemonicpassphrase" "walletpassphrase" )
walletlock
walletpassphrase "passphrase" timeout ( mixingonly )
walletpassphrasechange "oldpassphrase" "newpassphrase"

== Zmq ==
getzmqnotifications

LOADWALLET:
PS C:\Users\56947\Desktop\raptoreum-win-1.3.17.05> ./raptoreum-cli  help loadwallet
loadwallet "filename"

Loads a wallet from a wallet file or directory.
Note that all wallet command-line options used when starting raptoreumd will be
applied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).

Arguments:
1. "filename"    (string, required) The wallet directory or .dat file.

Result:
{
  "name" :    <wallet_name>,        (string) The wallet name if loaded successfully.
  "warning" : <warning>,            (string) Warning message if wallet was not loaded cleanly.
}

Examples:
> raptoreum-cli loadwallet "test.dat"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "loadwallet", "params": ["test.dat"] }' -H 'content-type: text/plain;' http://127.0.0.1:10225/


CHILD PROCESS:
https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback

If a callback function is provided, it is called with the arguments (error, stdout, stderr). On success, error will be null. On error, error will be an instance of Error. The error.code property will be the exit code of the process. By convention, any exit code other than 0 indicates an error. error.signal will be the signal that terminated the process.


LINUX Help:
Neovag — hoy a las 2:58
guys i'm about to dockerize de raptoreum-cli in ubuntu but i don't the find steps to do it in the documentation (https://docs.raptoreum.com/raptoreum-docs/raptoreumcore-cli/installing-and-using-raptoreumcore-cli/) i don't know if i have to create certain folders and where to do it to save the wallet info and conf.
Raptoreum Docs
Installing and Using RaptoreumCore CLI
Windows (not installer version) Download Raptoreumcore: https://raptoreum.com/latest (the .zip not the .exe) Unpack the files in directory of your choice. Create the RaptoreumCore directory in "C:\Users\\AppData\Roaming\RaptoreumCore". Create raptoreum.conf file is RaptoreumCore directory and add the following: daemon=1 addnode=lbdn.raptoreum.co...
Delgon [Flockpool] (cpuminer-gr) — hoy a las 3:31
The datafilder on linux is in $HOME/.raptoreumcore by default. It can be changed with -datadir path when you start the daemon and run cli iirc
This is where config and chain is stored
Neovag — hoy a las 3:33
what's iirc?-If i remember correctly
Delgon [Flockpool] (cpuminer-gr) — hoy a las 3:33
If you want another location in your docker, you can do it but then you would need to run the datadir or config to show the -cli where the actual info is. Tbh, i most of the time include everything in the raptoreum.conf (which resides in datadir by default) and make .raproeumcore folder with symbolic link to actual config location. It makes it easier and allows for running just raptoreum-cli command without any addditional configuration flags

install and extract in ubuntu
$ sudo apt-get update && apt-get install -y
$ sudo apt-get curl -y
$ sudo curl -o RTM.tar.gz https://github.com/Raptor3um/raptoreum/releases/download/1.3.17.05/raptoreum-ubuntu20-1.3.17.05.tar.gz
$ sudo tar -zxf RTM.tar.gz

Sudo for curl kek xX
d

$ sudo apt-get update && sudo apt-get install curl -y
$ curl -L https://github.com/Raptor3um/raptoreum/releases/download/1.3.17.05/raptoreum-ubuntu20-1.3.17.05.tar.gz | tar xz

@Fosgen Fixed a little for you ;
COMANDOS ASSETS:
raptoreum-cli getaddressbalance '[\"rt79N1qGMHrAGBmqxFFeTTYfNKqMaAfPJq\"]'         
createasset "{\"name\":\"MyCoin\",\"updatable\":false,\"is_unique\":false,\"decimalpoint\":0,\"type\":0,\"targetAddress\":\"rau2d3EvbQeHC2UZDw4t5bmz86GKqsR21y\",\"issueFrequency\":0,\"amount\":10,\"ownerAddress\":\"rau2d3EvbQeHC2UZDw4t5bmz86GKqsR21y\"}"

SSH HOSTINGER:
C:\Users\56947\Desktop\raptoreum>ssh-keygen -t ed25519 -C "rodrigomreidenbach@gmail.com"
Generating public/private ed25519 key pair.
Enter file in which to save the key (C:\Users\56947/.ssh/id_ed25519):
Created directory 'C:\\Users\\56947/.ssh'.